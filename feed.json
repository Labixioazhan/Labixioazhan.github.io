{"title":"Boolean","description":"程序员小白","language":"","link":"https://labixioazhan.github.io","pubDate":"Sat, 15 Aug 2020 10:04:16 GMT","lastBuildDate":"Sat, 15 Aug 2020 10:05:48 GMT","generator":"hexo-generator-json-feed","webMaster":"徐展","items":[{"title":"ssm实现crud","link":"https://labixioazhan.github.io/2020/08/15/ssm实现crud/","description":"ssm项目的总结​ 到目前该项目已经写了四遍(其中预习也写了一遍只不过复制为多),第二遍只复制jsp页面,第三第四遍基本上全手写.有些错误和理解就必须手打才能熟悉.","pubDate":"Sat, 15 Aug 2020 10:04:16 GMT","guid":"https://labixioazhan.github.io/2020/08/15/ssm实现crud/","category":"ssm"},{"title":"Spring MVC","link":"https://labixioazhan.github.io/2020/08/13/Spring-MVC/","description":"一 MVC思想:M:model模型,业务逻辑,数据存储 V:view视图,界面排版布局,展示模型数据 C:controller控制器 接受用户请求,交给模型对象处理选择视图","pubDate":"Thu, 13 Aug 2020 12:06:31 GMT","guid":"https://labixioazhan.github.io/2020/08/13/Spring-MVC/","category":"Spring MVC"},{"title":"IOC和DI注解以及动态代理","link":"https://labixioazhan.github.io/2020/08/09/IOC和DI注解以及动态代理/","description":"注解实现Ioc 和DIxml的配置方式可以很清楚了解ioc和DI的方式,但是配置过程较为复杂,所以要使用注解的方式简化开发. @value:注入常量值 Spring 包下的 @Autowired 可以让 Spring 自动的把属性或字段需要的对象找出来，并注入到属性上或字段上。 可以贴在字段或者 setter 方法上面。 可以同时注入多个对象。 可以注入一些 Spring 内置的重要对象，比如 BeanFactory，ApplicationContext 等。 默认情况下 Autowired 注解必须要能找到对应的对象，否则报错。通过 required=false 来避免这个问题：@Autowired(required=false)。 Autowired 注解寻找 bean 的方式： ​ 首先按照依赖对象的类型找，若找到，就是用 setter 或者字段直接注入。 ​ 如果在 Spring 上下文中找到多个匹配的类型，再按照名字去找，若没有匹配报错。 ​ 可以通过使用 @Qualifier(“other”) 标签来规定依赖对象按照 bean 的 id 和 类型的组合方式去找。 JavaEE下的Resource Resource和Autowired使用基本类似,大多数情况下可以直接替换","pubDate":"Sun, 09 Aug 2020 03:08:02 GMT","guid":"https://labixioazhan.github.io/2020/08/09/IOC和DI注解以及动态代理/","category":"spring"},{"title":"spring基础","link":"https://labixioazhan.github.io/2020/08/07/spring基础/","description":"一 装配bean1.1 自动化装配Spring会从两个角度来实现自动化装配: ​ 组件扫描:Spring会自动发现应用上下文中所创建的bean. ​ 自动装配:Spring自动满足bean之间的依赖 @component注解用在类上表明该类会作为组件,并且告知Spring要为这个类创建bean 但是组件扫描默认时不启用的,需要显示配置spring,让它去寻找带有@component注解的类 123@Configtuation@ComponentScanpublic class XXXConfig&#123;&#125; @componentScan注解默认会扫描与配置类相同的包以及该包下所有子包,查找带有@Component注解的类为其创建一个bean @componentScan(“包名”)可以单独设置扫描的包 @Component(basePackages={“包名1”,”包名2”})设置扫描多个包 @Component(basePackageClasses={xxx.class,vvv.class}来为指定包中所包含的接口和类 @Configtuation注解用于告诉Spring这是一个配置类 还可以使用xml方式开启组件扫描:可以使用Springcontext命名空间 1&lt;context:component-scan base-package = \"包名\"&gt;&lt;/context:component-scan&gt;","pubDate":"Fri, 07 Aug 2020 08:58:37 GMT","guid":"https://labixioazhan.github.io/2020/08/07/spring基础/","category":"Spring"},{"title":"Mybatis","link":"https://labixioazhan.github.io/2020/08/06/Mybatis/","description":"mybatis基于xml的操作(不写实现类)myabtis配置文件:这里使用properties文件将数据库相关信息抽取 注意一定要在最后引入映射文件的位置 1234567891011121314151617181920212223242526272829303132&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt; &lt;!--作用: 引用数据库配置文件 --&gt; &lt;properties resource=\"db.properties\"/&gt; &lt;!--作用: 配置环境(可以配多个)--&gt; &lt;environments default=\"development\"&gt; &lt;!--作用: 配置环境变量--&gt; &lt;environment id=\"development\"&gt; &lt;!--作用: 事物管理器 JDBC 含义:使用jdbc类型的事务管理器 --&gt; &lt;transactionManager type=\"JDBC\"/&gt; &lt;!--作用:数据源 POOLED含义:数据源类型:数据库连接池 --&gt; &lt;dataSource type=\"POOLED\"&gt; &lt;property name=\"driver\" value=\"$&#123;driverClassName&#125;\"/&gt; &lt;property name=\"url\" value=\"$&#123;url&#125;\"/&gt; &lt;property name=\"username\" value=\"$&#123;username&#125;\"/&gt; &lt;property name=\"password\" value=\"$&#123;password&#125;\"/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;!--作用:配置去哪里可以找到sql映射文件 --&gt; &lt;mappers&gt; &lt;mapper resource=\"cn\\wolfcode\\dao\\EmpDao.xml\"&gt;&lt;/mapper&gt; &lt;/mappers&gt;&lt;/configuration&gt;","pubDate":"Thu, 06 Aug 2020 10:00:21 GMT","guid":"https://labixioazhan.github.io/2020/08/06/Mybatis/","category":"mybatis"},{"title":"Maven的安装与配置","link":"https://labixioazhan.github.io/2020/08/03/Maven/","description":"Mavenmaven的安装 检查JDK版本,打开命令行输入java -version,如果报错可能是没有配置环境变量导致的,给java配置环境变量 将下载好的maven压缩包解压,解压后的路径最好不要使用中文和空格\\ 配置maven的环境变量 打开命令行输入mvn -v检查是否安装成功 maven设置本地仓库路径和更改仓库镜像 123456789101112&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\"&gt; &lt;!-- 本地仓库地址 --&gt; &lt;localRepository&gt;你本地仓库的目录位置&lt;/localRepository&gt; &lt;mirrors&gt; &lt;!-- 阿里仓库镜像 --&gt; &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; &lt;/mirrors&gt; &lt;/settings&gt;","pubDate":"Mon, 03 Aug 2020 06:16:45 GMT","guid":"https://labixioazhan.github.io/2020/08/03/Maven/","category":"Maven"},{"title":"myPhoto","link":"https://labixioazhan.github.io/2020/08/02/myPhoto/","description":"","pubDate":"Sun, 02 Aug 2020 06:00:05 GMT","guid":"https://labixioazhan.github.io/2020/08/02/myPhoto/","category":"photo"},{"title":"Hello World","link":"https://labixioazhan.github.io/2020/08/02/hello-world/","description":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","pubDate":"Sun, 02 Aug 2020 02:16:46 GMT","guid":"https://labixioazhan.github.io/2020/08/02/hello-world/","category":""}]}